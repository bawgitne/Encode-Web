const ZERO_WIDTH_JOINER = '‚Äç';      // nh·ªã ph√¢n 1
const ZERO_WIDTH_NON_JOINER = '‚Äå';   // nh·ªã ph√¢n 0
const ZERO_WIDTH_SPACE = '‚Äã';       // d·∫•u ph√¢n c√°ch

// Simple character list for mapping (ƒë·∫£m b·∫£o n√≥ kh·ªõp v·ªõi b·∫£n g·ªëc c·ªßa b·∫°n)
const simpleCharList = [
  // Ch·ªØ c√°i ti·∫øng Vi·ªát (th∆∞·ªùng v√† hoa)
  'a', '√°', '√†', '·∫£', '√£', '·∫°', 'ƒÉ', '·∫±', '·∫Ø', '·∫≥', '·∫µ', '·∫∑', '√¢', '·∫ß', '·∫•', '·∫©', '·∫´', '·∫≠',
  'b', 'c', 'd', 'ƒë',
  'e', '√©', '√®', '·∫ª', '·∫Ω', '·∫π', '√™', '·ªÅ', '·∫ø', '·ªÉ', '·ªÖ', '·ªá',
  'g', 'h', 'i', '√≠', '√¨', '·ªâ', 'ƒ©', '·ªã',
  'k', 'l', 'm', 'n',
  'o', '√≥', '√≤', '·ªè', '√µ', '·ªç', '√¥', '·ªì', '·ªë', '·ªï', '·ªó', '·ªô', '∆°', '·ªù', '·ªõ', '·ªü', '·ª°', '·ª£',
  'p', 'q', 'r', 's', 't',
  'u', '√∫', '√π', '·ªß', '≈©', '·ª•', '∆∞', '·ª´', '·ª©', '·ª≠', '·ªØ', '·ª±',
  'v', 'x', 'y', '√Ω', '·ª≥', '·ª∑', '·ªπ', '·ªµ',

  'A', '√Å', '√Ä', '·∫¢', '√É', '·∫†', 'ƒÇ', '·∫∞', '·∫Æ', '·∫≤', '·∫¥', '·∫∂', '√Ç', '·∫¶', '·∫§', '·∫®', '·∫™', '·∫¨',
  'B', 'C', 'D', 'ƒê',
  'E', '√â', '√à', '·∫∫', '·∫º', '·∫∏', '√ä', '·ªÄ', '·∫æ', '·ªÇ', '·ªÑ', '·ªÜ',
  'G', 'H', 'I', '√ç', '√å', '·ªà', 'ƒ®', '·ªä',
  'K', 'L', 'M', 'N',
  'O', '√ì', '√í', '·ªé', '√ï', '·ªå', '√î', '·ªí', '·ªê', '·ªî', '·ªñ', '·ªò', '∆†', '·ªú', '·ªö', '·ªû', '·ª†', '·ª¢',
  'P', 'Q', 'R', 'S', 'T',
  'U', '√ö', '√ô', '·ª¶', '≈®', '·ª§', '∆Ø', '·ª™', '·ª®', '·ª¨', '·ªÆ', '·ª∞',
  'V', 'X', 'Y', '√ù', '·ª≤', '·ª∂', '·ª∏', '·ª¥',

  // C√°c ch·ªØ c√°i ti·∫øng Anh c√≤n l·∫°i (kh√¥ng c√≥ trong b·ªô ti·∫øng Vi·ªát d·∫•u)
  'f', 'j', 'w', 'z',
  'F', 'J', 'W', 'Z',

  // S·ªë
  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',

  // K√Ω t·ª± ƒë·∫∑c bi·ªát v√† d·∫•u c√¢u ph·ªï bi·∫øn
  ' ', '.', ',', '!', '?', ';', ':', '-', '_', '(', ')', '[', ']', '{', '}',
  '/', '\\', '|', '@', '#', '$', '%', '^', '&', '*', '+', '=', '<', '>',
  '\'', '"', '`', '~', '¬∞', '‚Ç¨', '¬£', '¬•', '¬ß', '¬©', '¬Æ', '‚Ñ¢', '‚Ä¶',
  '‚Äò', '‚Äô', '‚Äú', '‚Äù', '¬´', '¬ª', '‚Äî', '‚Äì'
];

// ---
// ‚úÖ M√£ h√≥a an to√†n Unicode v·ªõi ch·∫ø ƒë·ªô Simple t√πy ch·ªçn
// H√†m n√†y v·∫´n ·ªïn, ch·ªâ ƒë·ªÉ tham kh·∫£o ƒë·ªÉ th·∫•y c√°ch Simple Mode ho·∫°t ƒë·ªông
export const encodeZeroWidth = (text: string, simpleMode = false): string => {
  if (simpleMode) {
    return text
      .split('')
      .map(char => {
        const index = simpleCharList.indexOf(char);
        if (index === -1) return ''; // B·ªè qua n·∫øu kh√¥ng t√¨m th·∫•y
        // Simple Mode d√πng ZERO_WIDTH_JOINER l·∫∑p l·∫°i
        return ZERO_WIDTH_JOINER.repeat(index + 1);
      })
      .filter(Boolean)
      .join(' '); // V√† kho·∫£ng tr·∫Øng th√¥ng th∆∞·ªùng l√†m d·∫•u ph√¢n c√°ch
  }

  const utf8Bytes = new TextEncoder().encode(text);
  const binary = Array.from(utf8Bytes)
    .map(byte => byte.toString(2).padStart(8, '0'))
    .join('');

  const encoded = binary
    .split('')
    .map(bit => bit === '1' ? ZERO_WIDTH_JOINER : ZERO_WIDTH_NON_JOINER)
    .join('');

  return encoded + ZERO_WIDTH_SPACE; // Normal Mode d√πng ZERO_WIDTH_SPACE l√†m d·∫•u ph√¢n c√°ch cu·ªëi chu·ªói
};



// ‚úÖ Gi·∫£i m√£ an to√†n Unicode, t·ª± ƒë·ªông ph√°t hi·ªán ch·∫ø ƒë·ªô
export const decodeZeroWidth = (text: string): string => {
  const delimiterIndex = text.indexOf(ZERO_WIDTH_SPACE);

  // N·∫øu t√¨m th·∫•y d·∫•u ph√¢n c√°ch (d·∫•u hi·ªáu c·ªßa Normal Mode)
  if (delimiterIndex !== -1) {
    const potentialNormalEncodedPart = text.substring(0, delimiterIndex);
    const relevantZeroWidthRegexForNormal = new RegExp(`[${ZERO_WIDTH_JOINER}${ZERO_WIDTH_NON_JOINER}]`, 'g');
    const normalModeMatches = potentialNormalEncodedPart.match(relevantZeroWidthRegexForNormal);

    if (normalModeMatches && normalModeMatches.length > 0) {
      // Logic gi·∫£i m√£ Normal Mode (ph·∫ßn n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠a l·ªói tr∆∞·ªõc ƒë√≥ v√† v·∫´n ch√≠nh x√°c)
      const binary = normalModeMatches
        .map(char => (char === ZERO_WIDTH_JOINER ? '1' : '0'))
        .join('');

      const bytes: number[] = [];
      for (let i = 0; i < binary.length; i += 8) {
        const byte = binary.slice(i, i + 8);
        if (byte.length === 8) {
          bytes.push(parseInt(byte, 2));
        }
      }
      try {
        return new TextDecoder().decode(new Uint8Array(bytes));
      } catch (e) {
        console.error("L·ªói gi·∫£i m√£ tin nh·∫Øn ch·∫ø ƒë·ªô normal:", e);
        return '';
      }
    }
    return ''; // D·∫•u ph√¢n c√°ch c√≥ nh∆∞ng kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá
  } else {
    // N·∫øu kh√¥ng t√¨m th·∫•y d·∫•u ph√¢n c√°ch, gi·∫£ ƒë·ªãnh l√† Simple Mode.
    const containsZeroWidthJoiner = text.includes(ZERO_WIDTH_JOINER);
    if (!containsZeroWidthJoiner) {
      return ''; // Kh√¥ng c√≥ ZWJ n√†o, n√™n kh√¥ng ph·∫£i tin nh·∫Øn Simple Mode
    }

    // Lu·ªìng gi·∫£i m√£ Simple Mode
    return text
      .trim()
      .split(' ') // T√°ch theo kho·∫£ng tr·∫Øng th√¥ng th∆∞·ªùng
      .map(group => {
        // *** ƒê√É S·ª¨A L·ªñI ·ªû ƒê√ÇY: ƒê·∫øm ZERO_WIDTH_JOINER ch·ª© kh√¥ng ph·∫£i ZERO_WIDTH_SPACE ***
        const count = [...group].filter(c => c === ZERO_WIDTH_JOINER).length;
        return simpleCharList[count - 1] || '';
      })
      .join('');
  }
};



// üìä Ph√¢n t√≠ch vƒÉn b·∫£n + Th·ª≠ gi·∫£i m√£ (kh√¥ng thay ƒë·ªïi)
export const analyzeZeroWidth = (text: string): string => {
  const zeroWidthChars = {
    '‚Äã': 'Zero Width Space',
    '‚Äå': 'Zero Width Non-Joiner',
    '‚Äç': 'Zero Width Joiner',
    '': 'Zero Width No-Break Space',
    ' ': 'Space'
  };

  const analysis = {
    totalLength: text.length,
    visibleLength: text.replace(/[‚Äã-‚Äç ]/g, '').length,
    hiddenChars: 0,
    foundChars: {} as Record<string, number>
  };

  for (const char of text) {
    if (char in zeroWidthChars || char === '\uFFFD') {
      analysis.hiddenChars++;
      const name = zeroWidthChars[char as keyof typeof zeroWidthChars] || 'Replacement Character (U+FFFD)';
      analysis.foundChars[name] = (analysis.foundChars[name] || 0) + 1;
    }
  }

  const hasHiddenMessage = analysis.hiddenChars > 0;
  let result = `üìä K·∫øt qu·∫£ ph√¢n t√≠ch vƒÉn b·∫£n\n\n`;
  result += `T·ªïng s·ªë k√Ω t·ª±: ${analysis.totalLength}\n`;
  result += `S·ªë k√Ω t·ª± hi·ªÉn th·ªã: ${analysis.visibleLength}\n`;
  result += `S·ªë k√Ω t·ª± ·∫©n: ${analysis.hiddenChars}\n\n`;

  if (hasHiddenMessage) {
    result += `üïµÔ∏è Ph√°t hi·ªán k√Ω t·ª± ·∫©n:\n`;
    for (const [char, count] of Object.entries(analysis.foundChars)) {
      result += `‚Ä¢ ${char}: ${count}\n`;
    }

    try {
      const decoded = decodeZeroWidth(text);
      if (decoded) {
        result += `\nüîì Tin nh·∫Øn ƒë√£ gi·∫£i m√£: "${decoded}"`;
      } else {
        result += `\n‚ùì Tin nh·∫Øn ·∫©n ƒë∆∞·ª£c ph√°t hi·ªán nh∆∞ng kh√¥ng th·ªÉ gi·∫£i m√£.`;
      }
    } catch (e) {
      result += `\n‚ùå Kh√¥ng th·ªÉ gi·∫£i m√£ tin nh·∫Øn ·∫©n (L·ªói trong qu√° tr√¨nh gi·∫£i m√£).`;
    }
  } else {
    result += `‚úÖ Kh√¥ng t√¨m th·∫•y k√Ω t·ª± zero-width ·∫©n n√†o`;
  }

  return result;
};



// ü´• ·∫®n trong vƒÉn b·∫£n che ph·ªß (kh√¥ng thay ƒë·ªïi)
export const hideInNormalText = (secretMessage: string, simpleMode = false): string => {
  const encoded = encodeZeroWidth(secretMessage, simpleMode);
  const coverTexts = [
    "ƒê√¢y l√† m·ªôt tin nh·∫Øn th√¥ng th∆∞·ªùng c√≥ ch·ª©a th√¥ng tin ·∫©n.",
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
    "Con c√°o n√¢u nhanh nh·∫πn nh·∫£y qua con ch√≥ l∆∞·ªùi bi·∫øng.",
    "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi n·ªÅn t·∫£ng giao ti·∫øp b·∫£o m·∫≠t c·ªßa ch√∫ng t√¥i.",
    "Vui l√≤ng xem l·∫°i t√†i li·ªáu ƒë√≠nh k√®m ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt."
  ];

  const coverText = coverTexts[Math.floor(Math.random() * coverTexts.length)];
  const words = coverText.split(' ');
  const insertIndex = Math.floor(words.length / 2);

  return words.slice(0, insertIndex).join(' ') +
    encoded +
    ' ' +
    words.slice(insertIndex).join(' ');
};