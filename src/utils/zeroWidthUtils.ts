// --- C√°c h·∫±ng s·ªë Zero-Width ---
const BIT_1 = '‚Äç'; // Zero Width Joiner      (t∆∞·ª£ng tr∆∞ng cho s·ªë 1)
const BIT_0 = '‚Äå'; // Zero Width Non-Joiner  (t∆∞·ª£ng tr∆∞ng cho s·ªë 0)
const DELIMITER = '‚Äã'; // Zero Width Space       (d·∫•u hi·ªáu k·∫øt th√∫c tin nh·∫Øn)

/**
 * ‚öôÔ∏è M√É H√ìA VƒÇN B·∫¢N (ENCODE)
 * Chuy·ªÉn ƒë·ªïi m·ªôt chu·ªói vƒÉn b·∫£n b·∫•t k·ª≥ th√†nh chu·ªói k√Ω t·ª± zero-width.
 * Ph∆∞∆°ng ph√°p n√†y lu√¥n s·ª≠ d·ª•ng chu·∫©n UTF-8 ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn.
 *
 * @param {string} text - VƒÉn b·∫£n g·ªëc c·∫ßn ·∫©n.
 * @returns {string} - Chu·ªói zero-width ƒë√£ m√£ h√≥a.
 */
export const encode = (text: string): string => {
  // 1. Chuy·ªÉn vƒÉn b·∫£n th√†nh c√°c byte UTF-8.
  const utf8Bytes = new TextEncoder().encode(text);

  // 2. Chuy·ªÉn t·ª´ng byte th√†nh chu·ªói nh·ªã ph√¢n 8-bit.
  const binaryString = Array.from(utf8Bytes)
    .map(byte => byte.toString(2).padStart(8, '0'))
    .join('');

  // 3. Chuy·ªÉn chu·ªói nh·ªã ph√¢n th√†nh c√°c k√Ω t·ª± zero-width.
  const encodedData = binaryString
    .split('')
    .map(bit => (bit === '1' ? BIT_1 : BIT_0))
    .join('');

  // 4. Th√™m d·∫•u ph√¢n c√°ch v√†o cu·ªëi ƒë·ªÉ nh·∫≠n bi·∫øt ƒëi·ªÉm k·∫øt th√∫c.
  return encodedData + DELIMITER;
};

/**
 * ‚öôÔ∏è GI·∫¢I M√É VƒÇN B·∫¢N (DECODE)
 * Chuy·ªÉn ƒë·ªïi m·ªôt chu·ªói zero-width tr·ªü l·∫°i vƒÉn b·∫£n g·ªëc.
 * T·ª± ƒë·ªông t√¨m ki·∫øm tin nh·∫Øn ·∫©n ƒë∆∞·ª£c m√£ h√≥a b·∫±ng h√†m encode.
 *
 * @param {string} textWithHiddenMessage - VƒÉn b·∫£n ch·ª©a tin nh·∫Øn ·∫©n.
 * @returns {string} - Tin nh·∫Øn g·ªëc ƒë√£ ƒë∆∞·ª£c gi·∫£i m√£, ho·∫∑c chu·ªói r·ªóng n·∫øu kh√¥ng t√¨m th·∫•y.
 */
export const decode = (textWithHiddenMessage: string): string => {
  // 1. T√¨m v·ªã tr√≠ c·ªßa d·∫•u ph√¢n c√°ch ƒë·ªÉ x√°c ƒë·ªãnh d·ªØ li·ªáu ·∫©n.
  const delimiterIndex = textWithHiddenMessage.indexOf(DELIMITER);
  if (delimiterIndex === -1) {
    return ''; // Kh√¥ng t√¨m th·∫•y d·∫•u hi·ªáu c·ªßa tin nh·∫Øn ·∫©n.
  }

  const encodedData = textWithHiddenMessage.substring(0, delimiterIndex);

  // 2. Chuy·ªÉn c√°c k√Ω t·ª± zero-width tr·ªü l·∫°i th√†nh chu·ªói nh·ªã ph√¢n.
  const binaryString = [...encodedData] // D√πng spread `...` ƒë·ªÉ duy·ªát k√Ω t·ª± Unicode ch√≠nh x√°c
    .map(char => {
      if (char === BIT_1) return '1';
      if (char === BIT_0) return '0';
      return ''; // B·ªè qua c√°c k√Ω t·ª± kh√¥ng li√™n quan kh√°c.
    })
    .join('');
  
  // D·ªØ li·ªáu ph·∫£i l√† m·ªôt b·ªôi s·ªë c·ªßa 8.
  if (!binaryString || binaryString.length % 8 !== 0) {
    return ''; // D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã h·ªèng.
  }

  // 3. Chuy·ªÉn chu·ªói nh·ªã ph√¢n th√†nh c√°c byte.
  const bytes: number[] = [];
  for (let i = 0; i < binaryString.length; i += 8) {
    bytes.push(parseInt(binaryString.slice(i, i + 8), 2));
  }

  // 4. Gi·∫£i m√£ c√°c byte UTF-8 ƒë·ªÉ l·∫•y l·∫°i vƒÉn b·∫£n g·ªëc.
  try {
    return new TextDecoder().decode(new Uint8Array(bytes));
  } catch (e) {
    console.error("L·ªói khi gi·∫£i m√£ UTF-8:", e);
    return '';
  }
};

/**
 * üìä PH√ÇN T√çCH VƒÇN B·∫¢N V√Ä TH·ª¨ GI·∫¢I M√É
 * Ph√¢n t√≠ch s·ª± hi·ªán di·ªán c·ªßa c√°c k√Ω t·ª± zero-width v√† c·ªë g·∫Øng gi·∫£i m√£ ch√∫ng.
 *
 * @param {string} text - VƒÉn b·∫£n c·∫ßn ph√¢n t√≠ch.
 * @returns {string} - B√°o c√°o ph√¢n t√≠ch v√† k·∫øt qu·∫£ gi·∫£i m√£ (n·∫øu c√≥).
 */
export const analyzeAndDecode = (text: string): string => {
  const hiddenChars = [...text].filter(c => [BIT_1, BIT_0, DELIMITER].includes(c));
  
  let result = `üìä K·∫øt qu·∫£ ph√¢n t√≠ch:\n`;
  result += `   - T·ªïng s·ªë k√Ω t·ª±: ${text.length}\n`;
  result += `   - S·ªë k√Ω t·ª± ·∫©n ph√°t hi·ªán: ${hiddenChars.length}\n`;

  if (hiddenChars.length > 0) {
    const decodedMessage = decode(text);
    if (decodedMessage) {
      result += `\nüîì Tin nh·∫Øn ƒë√£ gi·∫£i m√£: "${decodedMessage}"`;
    } else {
      result += `\n‚ùì Ph√°t hi·ªán k√Ω t·ª± ·∫©n nh∆∞ng kh√¥ng th·ªÉ gi·∫£i m√£ (c√≥ th·ªÉ d·ªØ li·ªáu ƒë√£ b·ªã h·ªèng).`;
    }
  } else {
    result += `\n‚úÖ Kh√¥ng t√¨m th·∫•y tin nh·∫Øn ·∫©n.`;
  }
  return result;
};

/**
 * ü´• ·∫®N TIN NH·∫ÆN V√ÄO VƒÇN B·∫¢N CHE PH·ª¶
 *
 * @param {string} secretMessage - Tin nh·∫Øn b√≠ m·∫≠t.
 * @param {string} coverText - ƒêo·∫°n vƒÉn b·∫£n d√πng ƒë·ªÉ che ph·ªß.
 * @returns {string} - VƒÉn b·∫£n che ph·ªß ƒë√£ ch·ª©a tin nh·∫Øn b√≠ m·∫≠t.
 */
export const hideInCoverText = (secretMessage: string, coverText: string): string => {
  const encoded = encode(secretMessage);
  
  // Ch√®n v√†o gi·ªØa vƒÉn b·∫£n che ph·ªß
  const insertIndex = Math.floor(coverText.length / 2);
  return coverText.slice(0, insertIndex) + encoded + coverText.slice(insertIndex);
};
